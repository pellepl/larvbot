# script for stm32f4x family

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32f4x
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x10000
}

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
#
# Since we may be running of an RC oscilator, we crank down the speed a
# bit more to be on the safe side. Perhaps superstition, but if are
# running off a crystal, we can run closer to the limit. Note
# that there can be a pretty wide band where things are more or less stable.
adapter_khz 1000

adapter_nsrst_delay 100
jtag_ntrst_delay 100

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
  # See STM Document RM0090
  # Section 32.6.2 - corresponds to Cortex-M4 r0p1
   set _CPUTAPID 0x4ba00477
}
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

if { [info exists BSTAPID] } {
   set _BSTAPID $BSTAPID
} else {
  # See STM Document RM0090
  # Section 32.6.3
  set _BSTAPID 0x06413041
}
jtag newtap $_CHIPNAME bs -irlen 5 -expected-id $_BSTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32f2x 0 0 0 0 $_TARGETNAME

# if srst is not fitted use SYSRESETREQ to
# perform a soft reset
cortex_m reset_config sysresetreq

#---------------------------------------------------

# use hardware reset, connect under reset
reset_config srst_only srst_nogate

$_TARGETNAME configure -event reset-start {
	echo "reset-start hook..done"
}

if {$_TARGETNAME == "$_CHIPNAME.cpu"} {
$_TARGETNAME configure -event reset-init {
# may need to unlock the readout on the stm
#	stm32f4x unlock 0
#	stm32x options_read 0
#note - cannot read flash on 1MHz - increase to 3MHz
	adapter_khz 1000
}

$_TARGETNAME configure -event reset-end {
	echo "reset-end hook..done"
}
}

# stm32x flash plugin only require the target#. 
#flash bank stm32x <base> <size> 0 0 <target#>
proc stm_configure_flash  { } {
#	flash bank stm32x 0x08000000 0 0 0 
}

proc stm_flash_unprotect { } {
	flash protect 0 0 last off
#NOT REQUIRED ANYMORE	flash protect_check 0
}

proc stm_await_flash_bsy { } {
	echo "await flash bsy flag"
	while 1 {
		# read out FLASH_SR, bit 16 is BUSY
		mem2array sr 32 0x40023c0c 1
		set sr_bsy [expr { ($sr(0) & 0x10000) >> 16 }]
		if {$sr_bsy==0} {
			break
		}
	}
	echo "flash bsy flag 0"
}

proc stm_reset_opts { } {
	echo "unlocking flash opts"
	# write unlock seq to FLASH_OPTKEYR 
	mww 0x40023c08 0x08192a3b
	mww 0x40023c08 0x4c5d6e7f

	stm_await_flash_bsy

	echo "reset flash opts"
	# set default value, make everything accessible
	mww 0x40023c14 0x0fffaaec
	# set write bit
	mww 0x40023c14 0x0fffaaee

	stm_await_flash_bsy
}

proc stm_flash_erase { length } {
	stm_reset_opts
	echo "flash opts reset, proceeding with erase, $length bytes.."
 	flash erase_address pad 0x08000000 $length
}

proc stm_flash_image { path } {
	flash write_bank 0 $path 0
}



